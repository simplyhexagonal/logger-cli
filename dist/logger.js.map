{
  "version": 3,
  "sources": ["../node_modules/.pnpm/dotenv@11.0.0/node_modules/dotenv/lib/main.js", "../src/index.ts"],
  "sourcesContent": ["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n", "require('dotenv').config();\n\n// @ts-ignore\nimport { version } from '../package.json';\n\nimport { resolve } from 'path';\nimport Logger, {\n  LoggerTransportName,\n  LoggerOptions,\n} from '@simplyhexagonal/logger';\n\nimport DiscordTransport from '@simplyhexagonal/logger-transport-discord';\n\nif (process.argv.includes('--version')) {\n  console.log(version);\n  process.exit(0);\n}\n\nconst { stdin } = process;\nlet data:any = '';\n\nstdin.setEncoding('utf8');\n\nconst getInput = () => {\n  return new Promise((resolve, reject) => {\n    stdin.on('data', (chunk) => {\n      data += chunk;\n    });\n\n    stdin.on('end', () => {\n      data = [data];\n      resolve(data);\n    });\n\n    stdin.on('error', reject);\n  });\n};\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'fatal' | 'all' | 'raw';\n\n(async () => {\n  const config = require(resolve(__dirname, '../logger.config.js')) as LoggerOptions;\n\n  const logger = new Logger(\n    {\n      optionsByLevel: {\n        warn: [],\n        info: [],\n        debug: [],\n        error: [],\n        fatal: [],\n        all: [],\n        raw: [],\n      },\n      ...config,\n      transports: {\n        [`${LoggerTransportName.DISCORD}`]: DiscordTransport,\n        ...config.transports,\n      },\n    }\n  );\n\n  const binArgIdx = process.argv.findIndex((arg) => (/logger\\./).test(arg));\n\n  if (binArgIdx === process.argv.length - 1) {\n    await getInput();\n  } else {\n    data = process.argv.slice(binArgIdx + 1);\n  }\n\n  const loggerBinPath = process.argv[binArgIdx];\n  const level = loggerBinPath?.split('/').pop()?.split('.')[1];\n\n  await logger[level as LogLevel](...data);\n})();\n"],
  "mappings": "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",
  "names": []
}
